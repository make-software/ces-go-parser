// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "github.com/make-software/casper-go-sdk/v2/rpc"
	types "github.com/make-software/casper-go-sdk/v2/types"
	keypair "github.com/make-software/casper-go-sdk/v2/types/keypair"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountInfo mocks base method.
func (m *MockClient) GetAccountInfo(ctx context.Context, blockIdentifier *rpc.ParamBlockIdentifier, accountIdentifier rpc.AccountIdentifier) (rpc.StateGetAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfo", ctx, blockIdentifier, accountIdentifier)
	ret0, _ := ret[0].(rpc.StateGetAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfo indicates an expected call of GetAccountInfo.
func (mr *MockClientMockRecorder) GetAccountInfo(ctx, blockIdentifier, accountIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfo", reflect.TypeOf((*MockClient)(nil).GetAccountInfo), ctx, blockIdentifier, accountIdentifier)
}

// GetAccountInfoByBlochHash mocks base method.
func (m *MockClient) GetAccountInfoByBlochHash(ctx context.Context, blockHash string, pub keypair.PublicKey) (rpc.StateGetAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoByBlochHash", ctx, blockHash, pub)
	ret0, _ := ret[0].(rpc.StateGetAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoByBlochHash indicates an expected call of GetAccountInfoByBlochHash.
func (mr *MockClientMockRecorder) GetAccountInfoByBlochHash(ctx, blockHash, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoByBlochHash", reflect.TypeOf((*MockClient)(nil).GetAccountInfoByBlochHash), ctx, blockHash, pub)
}

// GetAccountInfoByBlochHeight mocks base method.
func (m *MockClient) GetAccountInfoByBlochHeight(ctx context.Context, blockHeight uint64, pub keypair.PublicKey) (rpc.StateGetAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoByBlochHeight", ctx, blockHeight, pub)
	ret0, _ := ret[0].(rpc.StateGetAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoByBlochHeight indicates an expected call of GetAccountInfoByBlochHeight.
func (mr *MockClientMockRecorder) GetAccountInfoByBlochHeight(ctx, blockHeight, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoByBlochHeight", reflect.TypeOf((*MockClient)(nil).GetAccountInfoByBlochHeight), ctx, blockHeight, pub)
}

// GetAuctionInfoByHash mocks base method.
func (m *MockClient) GetAuctionInfoByHash(ctx context.Context, blockHash string) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctionInfoByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctionInfoByHash indicates an expected call of GetAuctionInfoByHash.
func (mr *MockClientMockRecorder) GetAuctionInfoByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctionInfoByHash", reflect.TypeOf((*MockClient)(nil).GetAuctionInfoByHash), ctx, blockHash)
}

// GetAuctionInfoByHeight mocks base method.
func (m *MockClient) GetAuctionInfoByHeight(ctx context.Context, height uint64) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctionInfoByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctionInfoByHeight indicates an expected call of GetAuctionInfoByHeight.
func (mr *MockClientMockRecorder) GetAuctionInfoByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctionInfoByHeight", reflect.TypeOf((*MockClient)(nil).GetAuctionInfoByHeight), ctx, height)
}

// GetBalanceByStateRootHash mocks base method.
func (m *MockClient) GetBalanceByStateRootHash(ctx context.Context, purseURef, stateRootHash string) (rpc.StateGetBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByStateRootHash", ctx, purseURef, stateRootHash)
	ret0, _ := ret[0].(rpc.StateGetBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByStateRootHash indicates an expected call of GetBalanceByStateRootHash.
func (mr *MockClientMockRecorder) GetBalanceByStateRootHash(ctx, purseURef, stateRootHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByStateRootHash", reflect.TypeOf((*MockClient)(nil).GetBalanceByStateRootHash), ctx, purseURef, stateRootHash)
}

// GetBlockByHash mocks base method.
func (m *MockClient) GetBlockByHash(ctx context.Context, hash string) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", ctx, hash)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockClientMockRecorder) GetBlockByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockClient)(nil).GetBlockByHash), ctx, hash)
}

// GetBlockByHeight mocks base method.
func (m *MockClient) GetBlockByHeight(ctx context.Context, height uint64) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockClientMockRecorder) GetBlockByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockClient)(nil).GetBlockByHeight), ctx, height)
}

// GetBlockTransfersByHash mocks base method.
func (m *MockClient) GetBlockTransfersByHash(ctx context.Context, blockHash string) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransfersByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransfersByHash indicates an expected call of GetBlockTransfersByHash.
func (mr *MockClientMockRecorder) GetBlockTransfersByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransfersByHash", reflect.TypeOf((*MockClient)(nil).GetBlockTransfersByHash), ctx, blockHash)
}

// GetBlockTransfersByHeight mocks base method.
func (m *MockClient) GetBlockTransfersByHeight(ctx context.Context, height uint64) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransfersByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransfersByHeight indicates an expected call of GetBlockTransfersByHeight.
func (mr *MockClientMockRecorder) GetBlockTransfersByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransfersByHeight", reflect.TypeOf((*MockClient)(nil).GetBlockTransfersByHeight), ctx, height)
}

// GetChainspec mocks base method.
func (m *MockClient) GetChainspec(ctx context.Context) (rpc.InfoGetChainspecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainspec", ctx)
	ret0, _ := ret[0].(rpc.InfoGetChainspecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainspec indicates an expected call of GetChainspec.
func (mr *MockClientMockRecorder) GetChainspec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainspec", reflect.TypeOf((*MockClient)(nil).GetChainspec), ctx)
}

// GetDelegatorRewardByBlockHash mocks base method.
func (m *MockClient) GetDelegatorRewardByBlockHash(ctx context.Context, validator, delegator keypair.PublicKey, blockHash string) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatorRewardByBlockHash", ctx, validator, delegator, blockHash)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatorRewardByBlockHash indicates an expected call of GetDelegatorRewardByBlockHash.
func (mr *MockClientMockRecorder) GetDelegatorRewardByBlockHash(ctx, validator, delegator, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatorRewardByBlockHash", reflect.TypeOf((*MockClient)(nil).GetDelegatorRewardByBlockHash), ctx, validator, delegator, blockHash)
}

// GetDelegatorRewardByBlockHeight mocks base method.
func (m *MockClient) GetDelegatorRewardByBlockHeight(ctx context.Context, validator, delegator keypair.PublicKey, height uint64) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatorRewardByBlockHeight", ctx, validator, delegator, height)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatorRewardByBlockHeight indicates an expected call of GetDelegatorRewardByBlockHeight.
func (mr *MockClientMockRecorder) GetDelegatorRewardByBlockHeight(ctx, validator, delegator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatorRewardByBlockHeight", reflect.TypeOf((*MockClient)(nil).GetDelegatorRewardByBlockHeight), ctx, validator, delegator, height)
}

// GetDelegatorRewardByEraID mocks base method.
func (m *MockClient) GetDelegatorRewardByEraID(ctx context.Context, validator, delegator keypair.PublicKey, eraID uint64) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatorRewardByEraID", ctx, validator, delegator, eraID)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatorRewardByEraID indicates an expected call of GetDelegatorRewardByEraID.
func (mr *MockClientMockRecorder) GetDelegatorRewardByEraID(ctx, validator, delegator, eraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatorRewardByEraID", reflect.TypeOf((*MockClient)(nil).GetDelegatorRewardByEraID), ctx, validator, delegator, eraID)
}

// GetDeploy mocks base method.
func (m *MockClient) GetDeploy(ctx context.Context, hash string) (rpc.InfoGetDeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploy", ctx, hash)
	ret0, _ := ret[0].(rpc.InfoGetDeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploy indicates an expected call of GetDeploy.
func (mr *MockClientMockRecorder) GetDeploy(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockClient)(nil).GetDeploy), ctx, hash)
}

// GetDeployFinalizedApproval mocks base method.
func (m *MockClient) GetDeployFinalizedApproval(ctx context.Context, hash string) (rpc.InfoGetDeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployFinalizedApproval", ctx, hash)
	ret0, _ := ret[0].(rpc.InfoGetDeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployFinalizedApproval indicates an expected call of GetDeployFinalizedApproval.
func (mr *MockClientMockRecorder) GetDeployFinalizedApproval(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployFinalizedApproval", reflect.TypeOf((*MockClient)(nil).GetDeployFinalizedApproval), ctx, hash)
}

// GetDictionaryItem mocks base method.
func (m *MockClient) GetDictionaryItem(ctx context.Context, stateRootHash *string, uref, key string) (rpc.StateGetDictionaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionaryItem", ctx, stateRootHash, uref, key)
	ret0, _ := ret[0].(rpc.StateGetDictionaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionaryItem indicates an expected call of GetDictionaryItem.
func (mr *MockClientMockRecorder) GetDictionaryItem(ctx, stateRootHash, uref, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionaryItem", reflect.TypeOf((*MockClient)(nil).GetDictionaryItem), ctx, stateRootHash, uref, key)
}

// GetDictionaryItemByIdentifier mocks base method.
func (m *MockClient) GetDictionaryItemByIdentifier(ctx context.Context, stateRootHash *string, identifier rpc.ParamDictionaryIdentifier) (rpc.StateGetDictionaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionaryItemByIdentifier", ctx, stateRootHash, identifier)
	ret0, _ := ret[0].(rpc.StateGetDictionaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionaryItemByIdentifier indicates an expected call of GetDictionaryItemByIdentifier.
func (mr *MockClientMockRecorder) GetDictionaryItemByIdentifier(ctx, stateRootHash, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionaryItemByIdentifier", reflect.TypeOf((*MockClient)(nil).GetDictionaryItemByIdentifier), ctx, stateRootHash, identifier)
}

// GetEntityByBlockHash mocks base method.
func (m *MockClient) GetEntityByBlockHash(ctx context.Context, entityIdentifier rpc.EntityIdentifier, hash string) (rpc.StateGetEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByBlockHash", ctx, entityIdentifier, hash)
	ret0, _ := ret[0].(rpc.StateGetEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByBlockHash indicates an expected call of GetEntityByBlockHash.
func (mr *MockClientMockRecorder) GetEntityByBlockHash(ctx, entityIdentifier, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByBlockHash", reflect.TypeOf((*MockClient)(nil).GetEntityByBlockHash), ctx, entityIdentifier, hash)
}

// GetEntityByBlockHeight mocks base method.
func (m *MockClient) GetEntityByBlockHeight(ctx context.Context, entityIdentifier rpc.EntityIdentifier, height uint64) (rpc.StateGetEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByBlockHeight", ctx, entityIdentifier, height)
	ret0, _ := ret[0].(rpc.StateGetEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByBlockHeight indicates an expected call of GetEntityByBlockHeight.
func (mr *MockClientMockRecorder) GetEntityByBlockHeight(ctx, entityIdentifier, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByBlockHeight", reflect.TypeOf((*MockClient)(nil).GetEntityByBlockHeight), ctx, entityIdentifier, height)
}

// GetEraInfoByBlockHash mocks base method.
func (m *MockClient) GetEraInfoByBlockHash(ctx context.Context, hash string) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoByBlockHash", ctx, hash)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoByBlockHash indicates an expected call of GetEraInfoByBlockHash.
func (mr *MockClientMockRecorder) GetEraInfoByBlockHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoByBlockHash", reflect.TypeOf((*MockClient)(nil).GetEraInfoByBlockHash), ctx, hash)
}

// GetEraInfoByBlockHeight mocks base method.
func (m *MockClient) GetEraInfoByBlockHeight(ctx context.Context, height uint64) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoByBlockHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoByBlockHeight indicates an expected call of GetEraInfoByBlockHeight.
func (mr *MockClientMockRecorder) GetEraInfoByBlockHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoByBlockHeight", reflect.TypeOf((*MockClient)(nil).GetEraInfoByBlockHeight), ctx, height)
}

// GetEraInfoLatest mocks base method.
func (m *MockClient) GetEraInfoLatest(ctx context.Context) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoLatest indicates an expected call of GetEraInfoLatest.
func (mr *MockClientMockRecorder) GetEraInfoLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoLatest", reflect.TypeOf((*MockClient)(nil).GetEraInfoLatest), ctx)
}

// GetEraSummaryByHash mocks base method.
func (m *MockClient) GetEraSummaryByHash(ctx context.Context, blockHash string) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryByHash indicates an expected call of GetEraSummaryByHash.
func (mr *MockClientMockRecorder) GetEraSummaryByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryByHash", reflect.TypeOf((*MockClient)(nil).GetEraSummaryByHash), ctx, blockHash)
}

// GetEraSummaryByHeight mocks base method.
func (m *MockClient) GetEraSummaryByHeight(ctx context.Context, height uint64) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryByHeight indicates an expected call of GetEraSummaryByHeight.
func (mr *MockClientMockRecorder) GetEraSummaryByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryByHeight", reflect.TypeOf((*MockClient)(nil).GetEraSummaryByHeight), ctx, height)
}

// GetEraSummaryLatest mocks base method.
func (m *MockClient) GetEraSummaryLatest(ctx context.Context) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryLatest indicates an expected call of GetEraSummaryLatest.
func (mr *MockClientMockRecorder) GetEraSummaryLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryLatest", reflect.TypeOf((*MockClient)(nil).GetEraSummaryLatest), ctx)
}

// GetLatestAuctionInfo mocks base method.
func (m *MockClient) GetLatestAuctionInfo(ctx context.Context) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAuctionInfo", ctx)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAuctionInfo indicates an expected call of GetLatestAuctionInfo.
func (mr *MockClientMockRecorder) GetLatestAuctionInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAuctionInfo", reflect.TypeOf((*MockClient)(nil).GetLatestAuctionInfo), ctx)
}

// GetLatestBalance mocks base method.
func (m *MockClient) GetLatestBalance(ctx context.Context, purseURef string) (rpc.StateGetBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBalance", ctx, purseURef)
	ret0, _ := ret[0].(rpc.StateGetBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBalance indicates an expected call of GetLatestBalance.
func (mr *MockClientMockRecorder) GetLatestBalance(ctx, purseURef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBalance", reflect.TypeOf((*MockClient)(nil).GetLatestBalance), ctx, purseURef)
}

// GetLatestBlock mocks base method.
func (m *MockClient) GetLatestBlock(ctx context.Context) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock", ctx)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockClientMockRecorder) GetLatestBlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockClient)(nil).GetLatestBlock), ctx)
}

// GetLatestBlockTransfers mocks base method.
func (m *MockClient) GetLatestBlockTransfers(ctx context.Context) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockTransfers", ctx)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockTransfers indicates an expected call of GetLatestBlockTransfers.
func (mr *MockClientMockRecorder) GetLatestBlockTransfers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockTransfers", reflect.TypeOf((*MockClient)(nil).GetLatestBlockTransfers), ctx)
}

// GetLatestDelegatorReward mocks base method.
func (m *MockClient) GetLatestDelegatorReward(ctx context.Context, validator, delegator keypair.PublicKey) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDelegatorReward", ctx, validator, delegator)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDelegatorReward indicates an expected call of GetLatestDelegatorReward.
func (mr *MockClientMockRecorder) GetLatestDelegatorReward(ctx, validator, delegator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDelegatorReward", reflect.TypeOf((*MockClient)(nil).GetLatestDelegatorReward), ctx, validator, delegator)
}

// GetLatestEntity mocks base method.
func (m *MockClient) GetLatestEntity(ctx context.Context, entityIdentifier rpc.EntityIdentifier) (rpc.StateGetEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEntity", ctx, entityIdentifier)
	ret0, _ := ret[0].(rpc.StateGetEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEntity indicates an expected call of GetLatestEntity.
func (mr *MockClientMockRecorder) GetLatestEntity(ctx, entityIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEntity", reflect.TypeOf((*MockClient)(nil).GetLatestEntity), ctx, entityIdentifier)
}

// GetLatestValidatorReward mocks base method.
func (m *MockClient) GetLatestValidatorReward(ctx context.Context, validator keypair.PublicKey) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestValidatorReward", ctx, validator)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestValidatorReward indicates an expected call of GetLatestValidatorReward.
func (mr *MockClientMockRecorder) GetLatestValidatorReward(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestValidatorReward", reflect.TypeOf((*MockClient)(nil).GetLatestValidatorReward), ctx, validator)
}

// GetPeers mocks base method.
func (m *MockClient) GetPeers(ctx context.Context) (rpc.InfoGetPeerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", ctx)
	ret0, _ := ret[0].(rpc.InfoGetPeerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockClientMockRecorder) GetPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockClient)(nil).GetPeers), ctx)
}

// GetStateItem mocks base method.
func (m *MockClient) GetStateItem(ctx context.Context, stateRootHash *string, key string, path []string) (rpc.StateGetItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateItem", ctx, stateRootHash, key, path)
	ret0, _ := ret[0].(rpc.StateGetItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateItem indicates an expected call of GetStateItem.
func (mr *MockClientMockRecorder) GetStateItem(ctx, stateRootHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateItem", reflect.TypeOf((*MockClient)(nil).GetStateItem), ctx, stateRootHash, key, path)
}

// GetStateRootHashByHash mocks base method.
func (m *MockClient) GetStateRootHashByHash(ctx context.Context, blockHash string) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashByHash indicates an expected call of GetStateRootHashByHash.
func (mr *MockClientMockRecorder) GetStateRootHashByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashByHash", reflect.TypeOf((*MockClient)(nil).GetStateRootHashByHash), ctx, blockHash)
}

// GetStateRootHashByHeight mocks base method.
func (m *MockClient) GetStateRootHashByHeight(ctx context.Context, height uint64) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashByHeight indicates an expected call of GetStateRootHashByHeight.
func (mr *MockClientMockRecorder) GetStateRootHashByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashByHeight", reflect.TypeOf((*MockClient)(nil).GetStateRootHashByHeight), ctx, height)
}

// GetStateRootHashLatest mocks base method.
func (m *MockClient) GetStateRootHashLatest(ctx context.Context) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashLatest indicates an expected call of GetStateRootHashLatest.
func (mr *MockClientMockRecorder) GetStateRootHashLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashLatest", reflect.TypeOf((*MockClient)(nil).GetStateRootHashLatest), ctx)
}

// GetStatus mocks base method.
func (m *MockClient) GetStatus(ctx context.Context) (rpc.InfoGetStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx)
	ret0, _ := ret[0].(rpc.InfoGetStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockClientMockRecorder) GetStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockClient)(nil).GetStatus), ctx)
}

// GetTransactionByDeployHash mocks base method.
func (m *MockClient) GetTransactionByDeployHash(ctx context.Context, deployHash string) (rpc.InfoGetTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByDeployHash", ctx, deployHash)
	ret0, _ := ret[0].(rpc.InfoGetTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByDeployHash indicates an expected call of GetTransactionByDeployHash.
func (mr *MockClientMockRecorder) GetTransactionByDeployHash(ctx, deployHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByDeployHash", reflect.TypeOf((*MockClient)(nil).GetTransactionByDeployHash), ctx, deployHash)
}

// GetTransactionByTransactionHash mocks base method.
func (m *MockClient) GetTransactionByTransactionHash(ctx context.Context, transactionHash string) (rpc.InfoGetTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByTransactionHash", ctx, transactionHash)
	ret0, _ := ret[0].(rpc.InfoGetTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByTransactionHash indicates an expected call of GetTransactionByTransactionHash.
func (mr *MockClientMockRecorder) GetTransactionByTransactionHash(ctx, transactionHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByTransactionHash", reflect.TypeOf((*MockClient)(nil).GetTransactionByTransactionHash), ctx, transactionHash)
}

// GetTransactionFinalizedApprovalByDeployHash mocks base method.
func (m *MockClient) GetTransactionFinalizedApprovalByDeployHash(ctx context.Context, deployHash string) (rpc.InfoGetTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionFinalizedApprovalByDeployHash", ctx, deployHash)
	ret0, _ := ret[0].(rpc.InfoGetTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionFinalizedApprovalByDeployHash indicates an expected call of GetTransactionFinalizedApprovalByDeployHash.
func (mr *MockClientMockRecorder) GetTransactionFinalizedApprovalByDeployHash(ctx, deployHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionFinalizedApprovalByDeployHash", reflect.TypeOf((*MockClient)(nil).GetTransactionFinalizedApprovalByDeployHash), ctx, deployHash)
}

// GetTransactionFinalizedApprovalByTransactionHash mocks base method.
func (m *MockClient) GetTransactionFinalizedApprovalByTransactionHash(ctx context.Context, transactionHash string) (rpc.InfoGetTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionFinalizedApprovalByTransactionHash", ctx, transactionHash)
	ret0, _ := ret[0].(rpc.InfoGetTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionFinalizedApprovalByTransactionHash indicates an expected call of GetTransactionFinalizedApprovalByTransactionHash.
func (mr *MockClientMockRecorder) GetTransactionFinalizedApprovalByTransactionHash(ctx, transactionHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionFinalizedApprovalByTransactionHash", reflect.TypeOf((*MockClient)(nil).GetTransactionFinalizedApprovalByTransactionHash), ctx, transactionHash)
}

// GetValidatorChangesInfo mocks base method.
func (m *MockClient) GetValidatorChangesInfo(ctx context.Context) (rpc.InfoGetValidatorChangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorChangesInfo", ctx)
	ret0, _ := ret[0].(rpc.InfoGetValidatorChangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorChangesInfo indicates an expected call of GetValidatorChangesInfo.
func (mr *MockClientMockRecorder) GetValidatorChangesInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorChangesInfo", reflect.TypeOf((*MockClient)(nil).GetValidatorChangesInfo), ctx)
}

// GetValidatorRewardByBlockHash mocks base method.
func (m *MockClient) GetValidatorRewardByBlockHash(ctx context.Context, validator keypair.PublicKey, blockHash string) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorRewardByBlockHash", ctx, validator, blockHash)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorRewardByBlockHash indicates an expected call of GetValidatorRewardByBlockHash.
func (mr *MockClientMockRecorder) GetValidatorRewardByBlockHash(ctx, validator, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorRewardByBlockHash", reflect.TypeOf((*MockClient)(nil).GetValidatorRewardByBlockHash), ctx, validator, blockHash)
}

// GetValidatorRewardByBlockHeight mocks base method.
func (m *MockClient) GetValidatorRewardByBlockHeight(ctx context.Context, validator keypair.PublicKey, height uint64) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorRewardByBlockHeight", ctx, validator, height)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorRewardByBlockHeight indicates an expected call of GetValidatorRewardByBlockHeight.
func (mr *MockClientMockRecorder) GetValidatorRewardByBlockHeight(ctx, validator, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorRewardByBlockHeight", reflect.TypeOf((*MockClient)(nil).GetValidatorRewardByBlockHeight), ctx, validator, height)
}

// GetValidatorRewardByEraID mocks base method.
func (m *MockClient) GetValidatorRewardByEraID(ctx context.Context, validator keypair.PublicKey, eraID uint64) (rpc.InfoGetRewardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorRewardByEraID", ctx, validator, eraID)
	ret0, _ := ret[0].(rpc.InfoGetRewardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorRewardByEraID indicates an expected call of GetValidatorRewardByEraID.
func (mr *MockClientMockRecorder) GetValidatorRewardByEraID(ctx, validator, eraID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorRewardByEraID", reflect.TypeOf((*MockClient)(nil).GetValidatorRewardByEraID), ctx, validator, eraID)
}

// PutDeploy mocks base method.
func (m *MockClient) PutDeploy(ctx context.Context, deploy types.Deploy) (rpc.PutDeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeploy", ctx, deploy)
	ret0, _ := ret[0].(rpc.PutDeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploy indicates an expected call of PutDeploy.
func (mr *MockClientMockRecorder) PutDeploy(ctx, deploy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploy", reflect.TypeOf((*MockClient)(nil).PutDeploy), ctx, deploy)
}

// PutTransactionV1 mocks base method.
func (m *MockClient) PutTransactionV1(ctx context.Context, transaction types.TransactionV1) (rpc.PutTransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTransactionV1", ctx, transaction)
	ret0, _ := ret[0].(rpc.PutTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTransactionV1 indicates an expected call of PutTransactionV1.
func (mr *MockClientMockRecorder) PutTransactionV1(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTransactionV1", reflect.TypeOf((*MockClient)(nil).PutTransactionV1), ctx, transaction)
}

// QueryBalanceByBlockHash mocks base method.
func (m *MockClient) QueryBalanceByBlockHash(ctx context.Context, purseIdentifier rpc.PurseIdentifier, blockHash string) (rpc.QueryBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceByBlockHash", ctx, purseIdentifier, blockHash)
	ret0, _ := ret[0].(rpc.QueryBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceByBlockHash indicates an expected call of QueryBalanceByBlockHash.
func (mr *MockClientMockRecorder) QueryBalanceByBlockHash(ctx, purseIdentifier, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceByBlockHash", reflect.TypeOf((*MockClient)(nil).QueryBalanceByBlockHash), ctx, purseIdentifier, blockHash)
}

// QueryBalanceByBlockHeight mocks base method.
func (m *MockClient) QueryBalanceByBlockHeight(ctx context.Context, purseIdentifier rpc.PurseIdentifier, height uint64) (rpc.QueryBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceByBlockHeight", ctx, purseIdentifier, height)
	ret0, _ := ret[0].(rpc.QueryBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceByBlockHeight indicates an expected call of QueryBalanceByBlockHeight.
func (mr *MockClientMockRecorder) QueryBalanceByBlockHeight(ctx, purseIdentifier, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceByBlockHeight", reflect.TypeOf((*MockClient)(nil).QueryBalanceByBlockHeight), ctx, purseIdentifier, height)
}

// QueryBalanceByStateRootHash mocks base method.
func (m *MockClient) QueryBalanceByStateRootHash(ctx context.Context, purseIdentifier rpc.PurseIdentifier, stateRootHash string) (rpc.QueryBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceByStateRootHash", ctx, purseIdentifier, stateRootHash)
	ret0, _ := ret[0].(rpc.QueryBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceByStateRootHash indicates an expected call of QueryBalanceByStateRootHash.
func (mr *MockClientMockRecorder) QueryBalanceByStateRootHash(ctx, purseIdentifier, stateRootHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceByStateRootHash", reflect.TypeOf((*MockClient)(nil).QueryBalanceByStateRootHash), ctx, purseIdentifier, stateRootHash)
}

// QueryBalanceDetailsByBlockHash mocks base method.
func (m *MockClient) QueryBalanceDetailsByBlockHash(ctx context.Context, purseIdentifier rpc.PurseIdentifier, blockHash string) (rpc.QueryBalanceDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceDetailsByBlockHash", ctx, purseIdentifier, blockHash)
	ret0, _ := ret[0].(rpc.QueryBalanceDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceDetailsByBlockHash indicates an expected call of QueryBalanceDetailsByBlockHash.
func (mr *MockClientMockRecorder) QueryBalanceDetailsByBlockHash(ctx, purseIdentifier, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceDetailsByBlockHash", reflect.TypeOf((*MockClient)(nil).QueryBalanceDetailsByBlockHash), ctx, purseIdentifier, blockHash)
}

// QueryBalanceDetailsByBlockHeight mocks base method.
func (m *MockClient) QueryBalanceDetailsByBlockHeight(ctx context.Context, purseIdentifier rpc.PurseIdentifier, height uint64) (rpc.QueryBalanceDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceDetailsByBlockHeight", ctx, purseIdentifier, height)
	ret0, _ := ret[0].(rpc.QueryBalanceDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceDetailsByBlockHeight indicates an expected call of QueryBalanceDetailsByBlockHeight.
func (mr *MockClientMockRecorder) QueryBalanceDetailsByBlockHeight(ctx, purseIdentifier, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceDetailsByBlockHeight", reflect.TypeOf((*MockClient)(nil).QueryBalanceDetailsByBlockHeight), ctx, purseIdentifier, height)
}

// QueryBalanceDetailsByStateRootHash mocks base method.
func (m *MockClient) QueryBalanceDetailsByStateRootHash(ctx context.Context, purseIdentifier rpc.PurseIdentifier, stateRootHash string) (rpc.QueryBalanceDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBalanceDetailsByStateRootHash", ctx, purseIdentifier, stateRootHash)
	ret0, _ := ret[0].(rpc.QueryBalanceDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBalanceDetailsByStateRootHash indicates an expected call of QueryBalanceDetailsByStateRootHash.
func (mr *MockClientMockRecorder) QueryBalanceDetailsByStateRootHash(ctx, purseIdentifier, stateRootHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBalanceDetailsByStateRootHash", reflect.TypeOf((*MockClient)(nil).QueryBalanceDetailsByStateRootHash), ctx, purseIdentifier, stateRootHash)
}

// QueryGlobalStateByBlockHash mocks base method.
func (m *MockClient) QueryGlobalStateByBlockHash(ctx context.Context, blockHash, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGlobalStateByBlockHash", ctx, blockHash, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryGlobalStateByBlockHash indicates an expected call of QueryGlobalStateByBlockHash.
func (mr *MockClientMockRecorder) QueryGlobalStateByBlockHash(ctx, blockHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGlobalStateByBlockHash", reflect.TypeOf((*MockClient)(nil).QueryGlobalStateByBlockHash), ctx, blockHash, key, path)
}

// QueryGlobalStateByBlockHeight mocks base method.
func (m *MockClient) QueryGlobalStateByBlockHeight(ctx context.Context, blockHeight uint64, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGlobalStateByBlockHeight", ctx, blockHeight, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryGlobalStateByBlockHeight indicates an expected call of QueryGlobalStateByBlockHeight.
func (mr *MockClientMockRecorder) QueryGlobalStateByBlockHeight(ctx, blockHeight, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGlobalStateByBlockHeight", reflect.TypeOf((*MockClient)(nil).QueryGlobalStateByBlockHeight), ctx, blockHeight, key, path)
}

// QueryGlobalStateByStateHash mocks base method.
func (m *MockClient) QueryGlobalStateByStateHash(ctx context.Context, stateRootHash *string, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGlobalStateByStateHash", ctx, stateRootHash, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryGlobalStateByStateHash indicates an expected call of QueryGlobalStateByStateHash.
func (mr *MockClientMockRecorder) QueryGlobalStateByStateHash(ctx, stateRootHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGlobalStateByStateHash", reflect.TypeOf((*MockClient)(nil).QueryGlobalStateByStateHash), ctx, stateRootHash, key, path)
}

// QueryLatestBalance mocks base method.
func (m *MockClient) QueryLatestBalance(ctx context.Context, identifier rpc.PurseIdentifier) (rpc.QueryBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestBalance", ctx, identifier)
	ret0, _ := ret[0].(rpc.QueryBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestBalance indicates an expected call of QueryLatestBalance.
func (mr *MockClientMockRecorder) QueryLatestBalance(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestBalance", reflect.TypeOf((*MockClient)(nil).QueryLatestBalance), ctx, identifier)
}

// QueryLatestBalanceDetails mocks base method.
func (m *MockClient) QueryLatestBalanceDetails(ctx context.Context, purseIdentifier rpc.PurseIdentifier) (rpc.QueryBalanceDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestBalanceDetails", ctx, purseIdentifier)
	ret0, _ := ret[0].(rpc.QueryBalanceDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestBalanceDetails indicates an expected call of QueryLatestBalanceDetails.
func (mr *MockClientMockRecorder) QueryLatestBalanceDetails(ctx, purseIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestBalanceDetails", reflect.TypeOf((*MockClient)(nil).QueryLatestBalanceDetails), ctx, purseIdentifier)
}

// QueryLatestGlobalState mocks base method.
func (m *MockClient) QueryLatestGlobalState(ctx context.Context, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestGlobalState", ctx, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestGlobalState indicates an expected call of QueryLatestGlobalState.
func (mr *MockClientMockRecorder) QueryLatestGlobalState(ctx, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestGlobalState", reflect.TypeOf((*MockClient)(nil).QueryLatestGlobalState), ctx, key, path)
}
